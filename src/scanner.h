#ifndef scanner_h
#define scanner_h

typedef enum {
  TOKEN_PLUS_PLUS, TOKEN_MINUS_MINUS,
  TOKEN_PLUS, TOKEN_MINUS, TOKEN_STAR, TOKEN_SLASH, TOKEN_MODULUS,
  TOKEN_LESS, TOKEN_LESS_EQUAL, TOKEN_GREATER, TOKEN_GREATER_EQUAL, TOKEN_EQUAL_EQUAL, TOKEN_BANG_EQUAL,
  TOKEN_AND_AND, TOKEN_OR_OR, TOKEN_BANG,
  TOKEN_AND, TOKEN_OR, TOKEN_LEFT_SHIFT, TOKEN_RIGHT_SHIFT, TOKEN_TILDE, TOKEN_XOR,
  TOKEN_EQUAL, TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL, TOKEN_STAR_EQUAL, TOKEN_SLASH_EQUAL, TOKEN_MODULUS_EQUAL,
  TOKEN_TERNARY,
  TOKEN_ARROW,
  TOKEN_COMMAN,

  TOKEN_IDENTIFIER, TOKEN_INT_LITERAL,

  TOKEN_BREAK, TOKEN_CASE, TOKEN_CONST, TOKEN_CONTINUE, TOKEN_DEFAULT, TOKEN_DO, TOKEN_ELSE, TOKEN_ENUM, TOKEN_FOR, TOKEN_GOTO, TOKEN_IF, TOKEN_INT, TOKEN_RETURN, TOKEN_SIZEOF, TOKEN_STRUCT, TOKEN_SWITCH, TOKEN_TYPEDEF, TOKEN_UNION, TOKEN_VOID, TOKEN_WHILE
} TokenType;

typedef struct {
  TokenType type;
  const char* start;
  int length;
  int line;
} Token;

void initScanner(char* source);

Token nextToken();

#endif